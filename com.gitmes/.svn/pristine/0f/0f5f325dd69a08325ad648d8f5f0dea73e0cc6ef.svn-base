<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>공정 및 작업 관리</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    
    <!-- 상단 네비게이션 -->
    <nav th:replace="~{fragments/top.html :: fragment-top}"></nav>
    
    <div class="flex">
        <!-- 사이드바 -->
        <aside th:replace="~{fragments/sidebar.html :: fragment-sidebar}"></aside>

        <!-- 메인 컨텐츠 -->
        <div class="flex-1 p-6">
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-4">공정 및 작업 관리</h2>
                
                <div class="flex space-x-6">
                    <!-- 작업실 섹션 -->
                    <div class="w-1/2">
                        <h2 class="text-xl font-semibold mb-2">작업실 추가</h2>
						
						<form id="taskForm" action="/m97/s02/taskInsert" method="post">
                        <input type="text" id="task-name" name="task-name" placeholder="작업실 이름" class="border p-2 rounded w-full mb-2">
                        <textarea id="task-desc" name="task-desc" placeholder="작업실 설명" class="border p-2 rounded w-full mb-2"></textarea>
                        <button type="submit"class="bg-blue-500 text-white px-4 py-2 rounded">추가</button>
                        </form>
						
                        <h2 class="text-xl font-semibold mt-6 mb-2">작업실 목록</h2>
                        <ul id="task-list" class="list-disc pl-5 bg-gray-50 p-4 rounded">
							<li th:each="task : ${tasks}">
							    <strong th:text="${task.name}"></strong>: 
							    <span th:text="${task.description}"></span>
							</li>
                        </ul>
                    </div>
                    
                    <!-- 공정 섹션 -->
                    <div class="w-1/2">
                        <h2 class="text-xl font-semibold mb-2">공정 추가</h2>
						<form id="taskForm" action="/m97/s02/processInsert" method="post">
                        <input type="text" id="process-name" name="process-name" placeholder="공정 이름" class="border p-2 rounded w-full mb-2">
                        <textarea id="process-desc" name="process-desc" placeholder="공정 설명" class="border p-2 rounded w-full mb-2"></textarea>
                        <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">추가</button>
                        </form>
                        <h2 class="text-xl font-semibold mt-6 mb-2">공정 목록</h2>
						<div id="process-list" class="space-y-4 bg-gray-50 p-4 rounded">
						    <div class="border p-4 rounded bg-white" th:each="process : ${processs}" th:data-process-id="${process.id}">
						        <h3 class="font-semibold" th:text="${process.name}"></h3>
						        <p class="text-sm text-gray-600" th:text="${process.description}"></p>
						        <ul class="list-disc pl-5 process-tasks-list">
						            <li th:each="taskMappings : ${process.taskMappings}" th:data-task-id="${taskMappings.task.id}">
						                <strong th:text="${taskMappings.task.name}"></strong>: 
						                <span th:text="${taskMappings.task.description}"></span>
						            </li>
						        </ul>
						        <button th:onclick="'openTaskModal(' + ${process.id} + ')'" class="mt-2 bg-yellow-500 text-white px-3 py-1 rounded">작업실 추가</button>
						        
						        <!-- 공정 삭제 버튼 추가 -->
						        <button th:onclick="'deleteProcess(' + ${process.id} + ')'" class="mt-2 bg-red-500 text-white px-3 py-1 rounded">삭제</button>
						    </div>
						</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- 작업실 추가 모달 -->
	<div id="taskModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
	    <div class="bg-white p-6 rounded-lg shadow-md w-1/3">
	        <h2 class="text-xl font-bold mb-4">작업실 관리</h2>
	        
	        <input type="hidden" id="selectedProcessId">

	        <div class="mb-4">
	            <label class="block font-medium">작업실 선택</label>
	            <select id="taskSelect" class="border p-2 w-full mb-2">
	                <option th:each="task : ${tasks}" th:text="${task.name}" th:value="${task.id}"></option>
	            </select>
	            <button onclick="addSelectedTask()" class="bg-blue-600 text-white px-4 py-2 rounded">추가</button>
	        </div>
	        
	        <h3 class="text-lg font-semibold">현재 작업실 목록</h3>
	        <ul id="selected-tasks" class="list-disc pl-5 bg-gray-50 p-4 rounded mb-4"></ul>

	        <div class="flex justify-between">
	            <button onclick="closeTaskModal()" class="bg-gray-400 text-white px-4 py-2 rounded">닫기</button>
	            <button onclick="saveTasks()" class="bg-green-500 text-white px-4 py-2 rounded">저장</button>
	        </div>
	    </div>
	</div>

    <script>
		
        function openTaskModal(processId) {
			document.getElementById('selectedProcessId').value = processId;
			loadCurrentTasks(processId);
			document.getElementById('taskModal').classList.remove('hidden');
        }

		function loadCurrentTasks(processId) {
		    // 기존 목록 초기화
		    const selectedTasksList = document.getElementById('selected-tasks');
		    selectedTasksList.innerHTML = '';
		    
		    // 해당 공정에 연결된 작업실 찾기
		    const processElement = document.querySelector(`[data-process-id="${processId}"]`);
		    if (processElement) {
		        const tasksList = processElement.querySelector('.process-tasks-list');
		        const tasks = tasksList.querySelectorAll('li');
		        
		        // 작업실 목록을 모달에 추가
		        tasks.forEach(task => {
		            const taskName = task.querySelector('strong').textContent;
		            const taskId = task.getAttribute('data-task-id');
		            
		            const newTask = document.createElement('li');
		            newTask.setAttribute('data-task-id', taskId);
		            newTask.innerHTML = `<strong>${taskName}</strong> <button onclick="removeTask(this)" class="ml-2 text-red-500">삭제</button>`;
		            selectedTasksList.appendChild(newTask);
		        });
		    }
		}
		
        function closeTaskModal() {
            document.getElementById('taskModal').classList.add('hidden');
        }

		function addSelectedTask() {
		    const taskSelect = document.getElementById('taskSelect');
		    const selectedTask = taskSelect.options[taskSelect.selectedIndex].text;
		    const selectedTaskId = taskSelect.value;  // 선택된 task의 id 값
		    
		    console.log('Adding task with ID:', selectedTaskId);  // 디버깅: 선택된 task ID 확인
		    
		    const taskList = document.getElementById('selected-tasks');
		    const newTask = document.createElement('li');
		    newTask.setAttribute('data-task-id', selectedTaskId);
		    newTask.innerHTML = `<strong>${selectedTask}</strong> <button onclick="removeTask(this)" class="ml-2 text-red-500">삭제</button>`;
		    taskList.appendChild(newTask);
		}

        function removeTask(button) {
            button.parentElement.remove();
        }

		function saveTasks() {
		    const processId = document.getElementById('selectedProcessId').value;
		    const selectedTasks = document.getElementById('selected-tasks').querySelectorAll('li');
		    const taskIds = Array.from(selectedTasks).map(task => task.getAttribute('data-task-id')).filter(id => id);
		    // 서버로 데이터 전송
		    fetch('/m97/s02/insertTaskProcess', {
		        method: 'POST',
		        headers: {
		            'Content-Type': 'application/json',
		        },
		        body: JSON.stringify({
		            processId: processId,
		            taskIds: taskIds
		        })
		    })
		    .then(response => {
		        if (response.ok) {
		            return response.json();
		        }
		        throw new Error('서버 응답에 문제가 있습니다.');
		    })
		    .then(data => {
		        console.log('서버 응답:', data);
		        alert("작업실 목록이 성공적으로 저장되었습니다.");
		        
		        window.location.reload();
		        
		        closeTaskModal();
		    })
		    .catch(error => {
		        console.error('오류 발생:', error);
		        alert("작업실 목록 저장 중 오류가 발생했습니다: " + error.message);
		    });
		}
		
		// 공정 삭제 함수
		function deleteProcess(processId) {
		    if (confirm("이 공정을 삭제하시겠습니까?")) {
		        // 서버로 삭제 요청
		        fetch(`/setting/taskProcess/deleteProcess/${processId}`, {
		            method: 'DELETE',
		        })
		        .then(response => {
		            if (response.ok) {
		                alert("공정이 성공적으로 삭제되었습니다.");
		                window.location.reload(); // 삭제 후 페이지 새로 고침
		            } else {
		                throw new Error('공정 삭제에 실패했습니다.');
		            }
		        })
		        .catch(error => {
		            console.error('오류 발생:', error);
		            alert("공정 삭제 중 오류가 발생했습니다: " + error.message);
		        });
		    }
		}
		
    </script>
</body>
</html>
